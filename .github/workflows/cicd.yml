name: cicd

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
#   workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Compile
        run: echo Building...
  test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Run Unit Tests
        run: echo Testing your units... :X
           
  deploy_dev:
    name: Deploy to dev 
    if: github.event_name == 'pull_request' || github.event.ref == 'refs/heads/main'
    needs: [build, test]
    runs-on: ubuntu-latest
    environment: 
      name: dev
      url: 'https://dev.test.domain'
    steps:
      - name: Deploy
        run: echo Deploying...to...dev
        
  create_release: # TODO add ECR push from build output
    name: Create GH Release
    if: github.event.ref == 'refs/heads/main'
    needs: [build, test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node Env
        uses: actions/setup-node@v3.6.0
        with:
          node-version: 18.x
      - name: Release w/ Semantic-Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
             npx semantic-release@18 \
             --plugins '@semantic-release/commit-analyzer',\
             '@semantic-release/release-notes-generator',\
             '@semantic-release/github' \
             --tag-format 'release-v${version}' \
             --branches 'main'
    
  deploy_qa:
    name: Deploy to qa 
    if: github.event.ref == 'refs/heads/main'
    needs: [build, test]
    runs-on: ubuntu-latest
    environment: 
      name: qa
      url: 'http://qa.test.domain'
    steps:
      - name: Deploy
        run: echo Deploying...to...qa
            
  deploy_staging:
    name: Deploy to staging 
    needs: [deploy_qa]
    runs-on: ubuntu-latest
    environment: 
      name: staging
      url: 'http://test.domain'
    steps:
      - name: Deploy
        run: echo Deploying...to...staging
        
  deploy_prod:
    name: Deploy to prod
    needs: [deploy_staging]
    runs-on: ubuntu-latest
    environment: 
      name: staging
      url: 'http://test.domain'
    steps:
      - name: Deploy
        run: echo Deploying...to...staging
    
