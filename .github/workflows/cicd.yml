name: cicd

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
#   workflow_dispatch:

jobs:
  build: # TODO add ECR push from build output
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Compile
        run: echo Building...

  test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Run Unit Tests
        run: echo Testing your units... :X
           
  deploy_dev:
    name: Deploy to dev 
    if: github.event_name == 'pull_request' || github.event.ref == 'refs/heads/main'
    needs: [build, test]
    runs-on: ubuntu-latest
    environment: 
      name: dev
      url: 'https://dev.test.domain'
    steps:
      - name: Deploy
        run: echo Deploying...to...dev
        
  create_release: # TODO tag image in ECR with release tag
    name: Create GH Release
    if: github.event.ref == 'refs/heads/main'
    needs: [build, test, deploy_dev]
    outputs:
      release-tag: ${{ steps.semantic-release.outputs.release-tag }}
    runs-on: ubuntu-latest
    environment:
      name: release
      url: https://github.com/${{ github.repository }}/releases/tag/${{ steps.semantic-release.outputs.release-tag }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node Env
        uses: actions/setup-node@v3.6.0
        with:
          node-version: 18.x
      - name: Release w/ Semantic-Release
        id: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
             # install non-default semantic-release plugin
             npm install @semantic-release/exec
             # uses .releaserc for configuration
             npx semantic-release@18
      - name: Summary update
        env:
          RELEASE_TAG: ${{ steps.semantic-release.outputs.release-tag }}
        run: echo "$RELEASE_TAG" >> $GITHUB_STEP_SUMMARY

  deploy_qa:
    name: Deploy to qa
    needs: [create_release]
    runs-on: ubuntu-latest
    environment: 
      name: qa
      url: 'http://qa.test.domain'
    steps:
      - name: Deploy
        run: echo "Deploying...to...qa $GITHUB_REF with release-tag ${{needs.create_release.outputs.release-tag}}"

  deploy_staging:
    name: Deploy to staging 
    needs: [deploy_qa]
    runs-on: ubuntu-latest
    environment: 
      name: staging
      url: 'http://test.domain'
    steps:
      - name: Deploy
        run: echo Deploying...to...staging

  deploy_prod:
    name: Deploy to prod
    needs: [deploy_staging]
    runs-on: ubuntu-latest
    environment: 
      name: prod
      url: 'http://test.domain'
    steps:
      - name: Deploy
        run: echo Deploying...to...staging
